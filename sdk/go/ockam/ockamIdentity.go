// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ockam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OckamIdentity struct {
	pulumi.CustomResourceState

	// The JSON representation of the Ockam identity.
	Identity pulumi.StringOutput `pulumi:"identity"`
	// The JSON representation of the Ockam vault.
	Vault pulumi.StringOutput `pulumi:"vault"`
}

// NewOckamIdentity registers a new resource with the given unique name, arguments, and options.
func NewOckamIdentity(ctx *pulumi.Context,
	name string, args *OckamIdentityArgs, opts ...pulumi.ResourceOption) (*OckamIdentity, error) {
	if args == nil {
		args = &OckamIdentityArgs{}
	}

	var resource OckamIdentity
	err := ctx.RegisterResource("ockam:index/ockamIdentity:OckamIdentity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOckamIdentity gets an existing OckamIdentity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOckamIdentity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OckamIdentityState, opts ...pulumi.ResourceOption) (*OckamIdentity, error) {
	var resource OckamIdentity
	err := ctx.ReadResource("ockam:index/ockamIdentity:OckamIdentity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OckamIdentity resources.
type ockamIdentityState struct {
	// The JSON representation of the Ockam identity.
	Identity *string `pulumi:"identity"`
	// The JSON representation of the Ockam vault.
	Vault *string `pulumi:"vault"`
}

type OckamIdentityState struct {
	// The JSON representation of the Ockam identity.
	Identity pulumi.StringPtrInput
	// The JSON representation of the Ockam vault.
	Vault pulumi.StringPtrInput
}

func (OckamIdentityState) ElementType() reflect.Type {
	return reflect.TypeOf((*ockamIdentityState)(nil)).Elem()
}

type ockamIdentityArgs struct {
}

// The set of arguments for constructing a OckamIdentity resource.
type OckamIdentityArgs struct {
}

func (OckamIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ockamIdentityArgs)(nil)).Elem()
}

type OckamIdentityInput interface {
	pulumi.Input

	ToOckamIdentityOutput() OckamIdentityOutput
	ToOckamIdentityOutputWithContext(ctx context.Context) OckamIdentityOutput
}

func (*OckamIdentity) ElementType() reflect.Type {
	return reflect.TypeOf((**OckamIdentity)(nil)).Elem()
}

func (i *OckamIdentity) ToOckamIdentityOutput() OckamIdentityOutput {
	return i.ToOckamIdentityOutputWithContext(context.Background())
}

func (i *OckamIdentity) ToOckamIdentityOutputWithContext(ctx context.Context) OckamIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OckamIdentityOutput)
}

// OckamIdentityArrayInput is an input type that accepts OckamIdentityArray and OckamIdentityArrayOutput values.
// You can construct a concrete instance of `OckamIdentityArrayInput` via:
//
//	OckamIdentityArray{ OckamIdentityArgs{...} }
type OckamIdentityArrayInput interface {
	pulumi.Input

	ToOckamIdentityArrayOutput() OckamIdentityArrayOutput
	ToOckamIdentityArrayOutputWithContext(context.Context) OckamIdentityArrayOutput
}

type OckamIdentityArray []OckamIdentityInput

func (OckamIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OckamIdentity)(nil)).Elem()
}

func (i OckamIdentityArray) ToOckamIdentityArrayOutput() OckamIdentityArrayOutput {
	return i.ToOckamIdentityArrayOutputWithContext(context.Background())
}

func (i OckamIdentityArray) ToOckamIdentityArrayOutputWithContext(ctx context.Context) OckamIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OckamIdentityArrayOutput)
}

// OckamIdentityMapInput is an input type that accepts OckamIdentityMap and OckamIdentityMapOutput values.
// You can construct a concrete instance of `OckamIdentityMapInput` via:
//
//	OckamIdentityMap{ "key": OckamIdentityArgs{...} }
type OckamIdentityMapInput interface {
	pulumi.Input

	ToOckamIdentityMapOutput() OckamIdentityMapOutput
	ToOckamIdentityMapOutputWithContext(context.Context) OckamIdentityMapOutput
}

type OckamIdentityMap map[string]OckamIdentityInput

func (OckamIdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OckamIdentity)(nil)).Elem()
}

func (i OckamIdentityMap) ToOckamIdentityMapOutput() OckamIdentityMapOutput {
	return i.ToOckamIdentityMapOutputWithContext(context.Background())
}

func (i OckamIdentityMap) ToOckamIdentityMapOutputWithContext(ctx context.Context) OckamIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OckamIdentityMapOutput)
}

type OckamIdentityOutput struct{ *pulumi.OutputState }

func (OckamIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OckamIdentity)(nil)).Elem()
}

func (o OckamIdentityOutput) ToOckamIdentityOutput() OckamIdentityOutput {
	return o
}

func (o OckamIdentityOutput) ToOckamIdentityOutputWithContext(ctx context.Context) OckamIdentityOutput {
	return o
}

// The JSON representation of the Ockam identity.
func (o OckamIdentityOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v *OckamIdentity) pulumi.StringOutput { return v.Identity }).(pulumi.StringOutput)
}

// The JSON representation of the Ockam vault.
func (o OckamIdentityOutput) Vault() pulumi.StringOutput {
	return o.ApplyT(func(v *OckamIdentity) pulumi.StringOutput { return v.Vault }).(pulumi.StringOutput)
}

type OckamIdentityArrayOutput struct{ *pulumi.OutputState }

func (OckamIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OckamIdentity)(nil)).Elem()
}

func (o OckamIdentityArrayOutput) ToOckamIdentityArrayOutput() OckamIdentityArrayOutput {
	return o
}

func (o OckamIdentityArrayOutput) ToOckamIdentityArrayOutputWithContext(ctx context.Context) OckamIdentityArrayOutput {
	return o
}

func (o OckamIdentityArrayOutput) Index(i pulumi.IntInput) OckamIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OckamIdentity {
		return vs[0].([]*OckamIdentity)[vs[1].(int)]
	}).(OckamIdentityOutput)
}

type OckamIdentityMapOutput struct{ *pulumi.OutputState }

func (OckamIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OckamIdentity)(nil)).Elem()
}

func (o OckamIdentityMapOutput) ToOckamIdentityMapOutput() OckamIdentityMapOutput {
	return o
}

func (o OckamIdentityMapOutput) ToOckamIdentityMapOutputWithContext(ctx context.Context) OckamIdentityMapOutput {
	return o
}

func (o OckamIdentityMapOutput) MapIndex(k pulumi.StringInput) OckamIdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OckamIdentity {
		return vs[0].(map[string]*OckamIdentity)[vs[1].(string)]
	}).(OckamIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OckamIdentityInput)(nil)).Elem(), &OckamIdentity{})
	pulumi.RegisterInputType(reflect.TypeOf((*OckamIdentityArrayInput)(nil)).Elem(), OckamIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OckamIdentityMapInput)(nil)).Elem(), OckamIdentityMap{})
	pulumi.RegisterOutputType(OckamIdentityOutput{})
	pulumi.RegisterOutputType(OckamIdentityArrayOutput{})
	pulumi.RegisterOutputType(OckamIdentityMapOutput{})
}
